#include "Graphics/DX12/ConversionTypes.h"

#pragma region Conversion Tables
const DXGI_FORMAT FormatLUT[73] =
{
	DXGI_FORMAT_UNKNOWN ,
	DXGI_FORMAT_R32G32B32A32_FLOAT,
	DXGI_FORMAT_R32G32B32A32_UINT,
	DXGI_FORMAT_R32G32B32A32_SINT,

	DXGI_FORMAT_R32G32B32_FLOAT,
	DXGI_FORMAT_R32G32B32_UINT,
	DXGI_FORMAT_R32G32B32_SINT,

	DXGI_FORMAT_R16G16B16A16_FLOAT,
	DXGI_FORMAT_R16G16B16A16_UNORM,
	DXGI_FORMAT_R16G16B16A16_UINT,
	DXGI_FORMAT_R16G16B16A16_SNORM,
	DXGI_FORMAT_R16G16B16A16_SINT,

	DXGI_FORMAT_R32G32_FLOAT,
	DXGI_FORMAT_R32G32_UINT,
	DXGI_FORMAT_R32G32_SINT,

	DXGI_FORMAT_R32G8X24_TYPELESS,
	DXGI_FORMAT_D32_FLOAT_S8X24_UINT,

	DXGI_FORMAT_R10G10B10A2_UNORM,
	DXGI_FORMAT_R10G10B10A2_UINT,
	DXGI_FORMAT_R11G11B10_FLOAT,
	DXGI_FORMAT_R8G8B8A8_TYPELESS,
	DXGI_FORMAT_R8G8B8A8_UNORM,
	DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
	DXGI_FORMAT_R8G8B8A8_UINT,
	DXGI_FORMAT_R8G8B8A8_SNORM,
	DXGI_FORMAT_R8G8B8A8_SINT,

	DXGI_FORMAT_R16G16_TYPELESS,
	DXGI_FORMAT_R16G16_FLOAT,
	DXGI_FORMAT_R16G16_UNORM,
	DXGI_FORMAT_R16G16_UINT,
	DXGI_FORMAT_R16G16_SNORM,
	DXGI_FORMAT_R16G16_SINT,

	DXGI_FORMAT_R32_TYPELESS,
	DXGI_FORMAT_D32_FLOAT,
	DXGI_FORMAT_R32_FLOAT,
	DXGI_FORMAT_R32_UINT,
	DXGI_FORMAT_R32_SINT,

	DXGI_FORMAT_R24G8_TYPELESS,
	DXGI_FORMAT_D24_UNORM_S8_UINT,

	DXGI_FORMAT_R8G8_TYPELESS,
	DXGI_FORMAT_R8G8_UNORM,
	DXGI_FORMAT_R8G8_UINT,
	DXGI_FORMAT_R8G8_SNORM,
	DXGI_FORMAT_R8G8_SINT,
	DXGI_FORMAT_R16_TYPELESS,
	DXGI_FORMAT_R16_FLOAT,
	DXGI_FORMAT_D16_UNORM,
	DXGI_FORMAT_R16_UNORM,
	DXGI_FORMAT_R16_UINT,
	DXGI_FORMAT_R16_SNORM,
	DXGI_FORMAT_R16_SINT,

	DXGI_FORMAT_R8_TYPELESS,
	DXGI_FORMAT_R8_UNORM,
	DXGI_FORMAT_R8_UINT,
	DXGI_FORMAT_R8_SNORM,
	DXGI_FORMAT_R8_SINT,

	DXGI_FORMAT_BC1_UNORM,
	DXGI_FORMAT_BC1_UNORM_SRGB,

	DXGI_FORMAT_BC2_UNORM,
	DXGI_FORMAT_BC2_UNORM_SRGB,

	DXGI_FORMAT_BC3_UNORM,
	DXGI_FORMAT_BC3_UNORM_SRGB,

	DXGI_FORMAT_BC4_TYPELESS,
	DXGI_FORMAT_BC4_UNORM,
	DXGI_FORMAT_BC4_SNORM,

	DXGI_FORMAT_BC5_UNORM,
	DXGI_FORMAT_BC5_SNORM,

	DXGI_FORMAT_B8G8R8A8_UNORM,
	DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,

	DXGI_FORMAT_BC6H_UF16,
	DXGI_FORMAT_BC6H_SF16,
	DXGI_FORMAT_BC7_UNORM,
	DXGI_FORMAT_BC7_UNORM_SRGB,
};

const D3D12_FILTER FilterLUT[36] =
{
	D3D12_FILTER_MIN_MAG_MIP_POINT,
	D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR,
	D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT,
	D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MIN_MAG_MIP_LINEAR,
	D3D12_FILTER_ANISOTROPIC,
	D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT,
	D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
	D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
	D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
	D3D12_FILTER_COMPARISON_ANISOTROPIC,
	D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT,
	D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR,
	D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT,
	D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR,
	D3D12_FILTER_MINIMUM_ANISOTROPIC,
	D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT,
	D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR,
	D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT,
	D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT,
	D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR,
	D3D12_FILTER_MAXIMUM_ANISOTROPIC
};

const D3D12_TEXTURE_ADDRESS_MODE WrapModeLUT[5] =
{
	D3D12_TEXTURE_ADDRESS_MODE_WRAP,
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR,
	D3D12_TEXTURE_ADDRESS_MODE_CLAMP,
	D3D12_TEXTURE_ADDRESS_MODE_BORDER,
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE
};

const D3D12_COMPARISON_FUNC ComparisonLUT[8] =
{
	D3D12_COMPARISON_FUNC_NEVER,
	D3D12_COMPARISON_FUNC_LESS,
	D3D12_COMPARISON_FUNC_EQUAL,
	D3D12_COMPARISON_FUNC_LESS_EQUAL,
	D3D12_COMPARISON_FUNC_GREATER,
	D3D12_COMPARISON_FUNC_GREATER_EQUAL,
	D3D12_COMPARISON_FUNC_NOT_EQUAL,
	D3D12_COMPARISON_FUNC_ALWAYS
};

const D3D12_STENCIL_OP StencilOpLUT[8] =
{
	D3D12_STENCIL_OP_ZERO,
	D3D12_STENCIL_OP_KEEP,
	D3D12_STENCIL_OP_REPLACE,
	D3D12_STENCIL_OP_INCR,
	D3D12_STENCIL_OP_DECR,
	D3D12_STENCIL_OP_INCR_SAT,
	D3D12_STENCIL_OP_DECR_SAT,
	D3D12_STENCIL_OP_INVERT
};

const D3D12_BLEND BlendLUT[17] =
{
	D3D12_BLEND_ZERO,
	D3D12_BLEND_ONE,
	D3D12_BLEND_SRC_COLOR,
	D3D12_BLEND_INV_SRC_COLOR,
	D3D12_BLEND_SRC_ALPHA,
	D3D12_BLEND_INV_SRC_ALPHA,
	D3D12_BLEND_DEST_COLOR,
	D3D12_BLEND_INV_DEST_COLOR,
	D3D12_BLEND_DEST_ALPHA,
	D3D12_BLEND_INV_DEST_ALPHA,
	D3D12_BLEND_BLEND_FACTOR,
	D3D12_BLEND_INV_BLEND_FACTOR,
	D3D12_BLEND_SRC1_COLOR,
	D3D12_BLEND_INV_SRC1_COLOR,
	D3D12_BLEND_SRC1_ALPHA,
	D3D12_BLEND_INV_SRC1_ALPHA,
	D3D12_BLEND_SRC_ALPHA_SAT
};

const D3D12_BLEND_OP BlendOpLUT[5] =
{
	D3D12_BLEND_OP_ADD,
	D3D12_BLEND_OP_SUBTRACT,
	D3D12_BLEND_OP_REV_SUBTRACT,
	D3D12_BLEND_OP_MIN,
	D3D12_BLEND_OP_MAX
};

const D3D12_FILL_MODE FillModeLUT[2] =
{
	D3D12_FILL_MODE_WIREFRAME,
	D3D12_FILL_MODE_SOLID
};

const D3D12_CULL_MODE CullModeLUT[3] =
{
	D3D12_CULL_MODE_NONE,
	D3D12_CULL_MODE_FRONT,
	D3D12_CULL_MODE_BACK
};

const D3D12_DEPTH_WRITE_MASK DepthWriteLUT[2] =
{
	D3D12_DEPTH_WRITE_MASK_ZERO,
	D3D12_DEPTH_WRITE_MASK_ALL
};

const D3D12_COLOR_WRITE_ENABLE ColorWriteLUT[5] =
{
	D3D12_COLOR_WRITE_ENABLE_RED,
	D3D12_COLOR_WRITE_ENABLE_GREEN,
	D3D12_COLOR_WRITE_ENABLE_BLUE,
	D3D12_COLOR_WRITE_ENABLE_ALPHA,
	D3D12_COLOR_WRITE_ENABLE_ALL
};

const D3D12_INPUT_CLASSIFICATION InputClassLUT[2] =
{
	D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA,
	D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA
};

const D3D12_PRIMITIVE_TOPOLOGY_TYPE PipeTopologyLUT[5] =
{
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH,
};


const D3D12_PRIMITIVE_TOPOLOGY TopologyLUT[5] =
{
	D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
	D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
	D3D_PRIMITIVE_TOPOLOGY_LINELIST,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
	D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST,
};


const D3D12_RESOURCE_STATES ResourceStateLUT[] =
{
	D3D12_RESOURCE_STATE_COMMON,
	D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER,
	D3D12_RESOURCE_STATE_INDEX_BUFFER,
	D3D12_RESOURCE_STATE_RENDER_TARGET,
	D3D12_RESOURCE_STATE_UNORDERED_ACCESS,
	D3D12_RESOURCE_STATE_DEPTH_WRITE,
	D3D12_RESOURCE_STATE_DEPTH_READ,
	D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE,
	D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE,
	D3D12_RESOURCE_STATE_STREAM_OUT,
	D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT,
	D3D12_RESOURCE_STATE_COPY_DEST,
	D3D12_RESOURCE_STATE_COPY_SOURCE,
	D3D12_RESOURCE_STATE_RESOLVE_DEST,
	D3D12_RESOURCE_STATE_RESOLVE_SOURCE,
	D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE,
	D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE,
	D3D12_RESOURCE_STATE_GENERIC_READ,
	D3D12_RESOURCE_STATE_PRESENT,
	D3D12_RESOURCE_STATE_PREDICATION
};

const D3D12_HEAP_TYPE HeapLUT[] =
{
	D3D12_HEAP_TYPE_DEFAULT,
	D3D12_HEAP_TYPE_UPLOAD,
	D3D12_HEAP_TYPE_READBACK
};

const D3D12_RESOURCE_DIMENSION DimensionLUT[] =
{
		D3D12_RESOURCE_DIMENSION_UNKNOWN,
		D3D12_RESOURCE_DIMENSION_BUFFER,
		D3D12_RESOURCE_DIMENSION_TEXTURE1D,
		D3D12_RESOURCE_DIMENSION_TEXTURE2D,
		D3D12_RESOURCE_DIMENSION_TEXTURE3D
};

const D3D12_RESOURCE_FLAGS ResourceFlagLUT[] =
{
	 D3D12_RESOURCE_FLAG_NONE,
	 D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET,
	 D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL,
	 D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS,
	 D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE,
	 D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER,
	 D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS,
};

const D3D12_TEXTURE_LAYOUT TextureLayoutLUT[] =
{
	D3D12_TEXTURE_LAYOUT_UNKNOWN,
	D3D12_TEXTURE_LAYOUT_ROW_MAJOR,
	D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE,
	D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE
};

const D3D12_DESCRIPTOR_HEAP_TYPE DescHeapTypeLUT[] =
{
	D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV,
	D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER,
	D3D12_DESCRIPTOR_HEAP_TYPE_RTV,
	D3D12_DESCRIPTOR_HEAP_TYPE_DSV,
	D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES
};

#pragma endregion

namespace ConversionTypes
{
	D3D12_HEAP_TYPE					ConvertHeapType(HeapType type) { return HeapLUT[(u32)type]; }
	D3D12_DESCRIPTOR_HEAP_TYPE ConvertDescHeapType(DescHeapType type){ return DescHeapTypeLUT[(u32)type]; }
	DXGI_FORMAT						ConvertFormat(SurfaceFormat format) { return FormatLUT[(u32)format]; }
	D3D12_FILTER					ConvertFilter(FilterMode filter) { return FilterLUT[(u32)filter]; }
	D3D12_TEXTURE_ADDRESS_MODE		ConvertAddressMode(WrapMode mode) { return WrapModeLUT[(u32)mode]; }
	D3D12_COMPARISON_FUNC			ConvertComparison(ComparisonFunc comparisonFunc) { return ComparisonLUT[(u32)comparisonFunc]; }
	D3D12_STENCIL_OP				ConvertStencilOp(StencilOp stencilOp) { return StencilOpLUT[(u32)stencilOp]; }
	D3D12_BLEND						ConvertBlend(Blend blend) { return BlendLUT[(u32)blend]; }
	D3D12_BLEND_OP					ConvertBlendOp(BlendOp blendOp) { return BlendOpLUT[(u32)blendOp]; }
	D3D12_FILL_MODE					ConvertFillMode(FillMode fillMode) { return FillModeLUT[(u32)fillMode]; }
	D3D12_CULL_MODE					ConvertCullMode(CullMode cullMode) { return CullModeLUT[(u32)cullMode]; }
	D3D12_DEPTH_WRITE_MASK			ConvertDepthWrite(DepthWrite depthWrite) { return DepthWriteLUT[(u32)depthWrite]; }
	D3D12_COLOR_WRITE_ENABLE		ConvertBlendWrite(ColorWrite colorWrite) { return ColorWriteLUT[(u32)colorWrite]; }
	D3D12_INPUT_CLASSIFICATION		ConvertInputClass(InputType inputType) { return InputClassLUT[(u32)inputType]; }
	D3D12_PRIMITIVE_TOPOLOGY_TYPE	ConvertPipeTopology(PrimitiveTopology primitiveTopology) { return PipeTopologyLUT[(u32)primitiveTopology]; }
	D3D12_PRIMITIVE_TOPOLOGY		ConvertTopology(PrimitiveTopology primitiveTopology) { return TopologyLUT[(u32)primitiveTopology]; }
	D3D12_RESOURCE_STATES			ConvertResourceState(ResourceState resourceState) { return ResourceStateLUT[(u32)resourceState]; }
	D3D12_RESOURCE_DIMENSION		ConvertResourceDimension(ResourceDimension dimension){return DimensionLUT[(u32)dimension];}
	D3D12_TEXTURE_LAYOUT			ConvertTextureLayout(TextureLayout layout){ return TextureLayoutLUT[(u32)layout]; }
	D3D12_COMMAND_LIST_TYPE ConvertCommandListType(QueueType type)
	{
		switch (type)
		{
		case QueueType::Direct:
			return D3D12_COMMAND_LIST_TYPE_DIRECT;
			break;
		case QueueType::Compute:
			return D3D12_COMMAND_LIST_TYPE_COMPUTE;
			break;
		case QueueType::Copy:
			return D3D12_COMMAND_LIST_TYPE_COPY;
			break;
		default:
			return D3D12_COMMAND_LIST_TYPE_DIRECT;
			break;
		}
	}
};